[
  {
    "name": "Text",
    "text": [
      "Render text.",
      "Example",
      "source: tests/glyphs/Text.py"
    ],
    "attrs": [
      {
        "name": "angle",
        "descs": [
          "property type: AngleSpec",
          "The angles to rotate the text, as measured from the horizontal."
        ]
      },
      {
        "name": "js_callbacks",
        "descs": [
          "property type: Dict ( String , List ( Instance ( CustomJS  ) ) )",
          "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\nBokehJS side when the document is created.",
          "Typically, rather then modifying this property directly, callbacks should be\nadded using the Model.js_on_change method:"
        ]
      },
      {
        "name": "name",
        "descs": [
          "property type: String",
          "An arbitrary, user-supplied name for this model.",
          "This name can be useful when querying the document to retrieve specific\nBokeh models."
        ]
      },
      {
        "name": "tags",
        "descs": [
          "property type: List ( Any  )",
          "An optional list of arbitrary, user-supplied values to attach to this\nmodel.",
          "This data can be useful when querying the document to retrieve specific\nBokeh models:",
          "Or simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by CustomJS callbacks, etc."
        ]
      },
      {
        "name": "text",
        "descs": [
          "property type: StringSpec",
          "The text values to render."
        ]
      },
      {
        "name": "text_align",
        "descs": [
          "property type: Enum ( TextAlign  )",
          "The text align values for the text."
        ]
      },
      {
        "name": "text_alpha",
        "descs": [
          "property type: NumberSpec",
          "The text alpha values for the text."
        ]
      },
      {
        "name": "text_baseline",
        "descs": [
          "property type: Enum ( TextBaseline  )",
          "The text baseline values for the text."
        ]
      },
      {
        "name": "text_color",
        "descs": [
          "property type: ColorSpec",
          "The text color values for the text."
        ]
      },
      {
        "name": "text_font",
        "descs": [
          "property type: String",
          "The text font values for the text."
        ]
      },
      {
        "name": "text_font_size",
        "descs": [
          "property type: FontSizeSpec",
          "The text font size values for the text."
        ]
      },
      {
        "name": "text_font_style",
        "descs": [
          "property type: Enum ( FontStyle  )",
          "The text font style values for the text."
        ]
      },
      {
        "name": "visible",
        "descs": [
          "property type: Bool",
          "Whether the glyph should render or not."
        ]
      },
      {
        "name": "x",
        "descs": [
          "property type: NumberSpec",
          "The x-coordinates to locate the text anchors."
        ]
      },
      {
        "name": "x_offset",
        "descs": [
          "property type: NumberSpec",
          "Offset values to apply to the x-coordinates.",
          "This is useful, for instance, if it is desired to “float” text a fixed\ndistance in screen units from a given data position."
        ]
      },
      {
        "name": "y",
        "descs": [
          "property type: NumberSpec",
          "The y-coordinates to locate the text anchors."
        ]
      },
      {
        "name": "y_offset",
        "descs": [
          "property type: NumberSpec",
          "Offset values to apply to the y-coordinates.",
          "This is useful, for instance, if it is desired to “float” text a fixed\ndistance in screen units from a given data position."
        ]
      }
    ],
    "json": ""
  }
]
